/*
Copyright 2024 by infrapot

This program is a free software product. You can redistribute it and/or
modify it under the terms of the GNU Affero General Public License (AGPL)
version 3 as published by the Free Software Foundation.

For details, see the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html
*/

package v1alpha1

import (
	"hykube.io/apiserver/pkg/apis/hykube"
	"k8s.io/apimachinery/pkg/conversion"
	"unsafe"
)

// Convert_v1alpha1_ProviderSpec_To_hykube_ProviderSpec is an autogenerated conversion function.
func Convert_v1alpha1_ProviderSpec_To_hykube_ProviderSpec(in *ProviderSpec, out *hykube.ProviderSpec, s conversion.Scope) error {
	if in.ReferenceType != nil {
		// assume that ReferenceType is defaulted
		switch *in.ReferenceType {
		case ProviderReferenceType:
			out.ReferenceType = hykube.ProviderReferenceType
			out.ProviderReference = in.Reference
		}
	}

	out.DownloadName = in.DownloadName
	out.Version = (*string)(unsafe.Pointer(in.Version))
	out.DownloadUrl = (*string)(unsafe.Pointer(in.DownloadUrl))

	return nil
}

// Convert_hykube_ProviderSpec_To_v1alpha1_ProviderSpec is an autogenerated conversion function.
func Convert_hykube_ProviderSpec_To_v1alpha1_ProviderSpec(in *hykube.ProviderSpec, out *ProviderSpec, s conversion.Scope) error {
	switch in.ReferenceType {
	case hykube.ProviderReferenceType:
		t := ProviderReferenceType
		out.ReferenceType = &t
		out.Reference = in.ProviderReference
	}

	out.DownloadName = in.DownloadName
	out.Version = (*string)(unsafe.Pointer(in.Version))
	out.DownloadUrl = (*string)(unsafe.Pointer(in.DownloadUrl))

	return nil
}
