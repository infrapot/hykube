/*
Copyright 2024 by infrapot

This program is a free software product. You can redistribute it and/or
modify it under the terms of the GNU Affero General Public License (AGPL)
version 3 as published by the Free Software Foundation.

For details, see the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "hykube.io/apiserver/pkg/apis/hykube/v1alpha1"
	hykubev1alpha1 "hykube.io/apiserver/pkg/generated/applyconfiguration/hykube/v1alpha1"
	internal "hykube.io/apiserver/pkg/generated/applyconfiguration/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=hykube.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("Provider"):
		return &hykubev1alpha1.ProviderApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ProviderSpec"):
		return &hykubev1alpha1.ProviderSpecApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
