/*
Copyright 2024 by infrapot

This program is a free software product. You can redistribute it and/or
modify it under the terms of the GNU Affero General Public License (AGPL)
version 3 as published by the Free Software Foundation.

For details, see the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/infrapot/hykube/pkg/apis/hykube/v1alpha1"
	hykubev1alpha1 "github.com/infrapot/hykube/pkg/generated/applyconfiguration/hykube/v1alpha1"
	scheme "github.com/infrapot/hykube/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ProvidersGetter has a method to return a ProviderInterface.
// A group's client should implement this interface.
type ProvidersGetter interface {
	Providers(namespace string) ProviderInterface
}

// ProviderInterface has methods to work with Provider resources.
type ProviderInterface interface {
	Create(ctx context.Context, provider *v1alpha1.Provider, opts v1.CreateOptions) (*v1alpha1.Provider, error)
	Update(ctx context.Context, provider *v1alpha1.Provider, opts v1.UpdateOptions) (*v1alpha1.Provider, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, provider *v1alpha1.Provider, opts v1.UpdateOptions) (*v1alpha1.Provider, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.Provider, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.ProviderList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Provider, err error)
	Apply(ctx context.Context, provider *hykubev1alpha1.ProviderApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.Provider, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, provider *hykubev1alpha1.ProviderApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.Provider, err error)
	ProviderExpansion
}

// providers implements ProviderInterface
type providers struct {
	*gentype.ClientWithListAndApply[*v1alpha1.Provider, *v1alpha1.ProviderList, *hykubev1alpha1.ProviderApplyConfiguration]
}

// newProviders returns a Providers
func newProviders(c *HykubeV1alpha1Client, namespace string) *providers {
	return &providers{
		gentype.NewClientWithListAndApply[*v1alpha1.Provider, *v1alpha1.ProviderList, *hykubev1alpha1.ProviderApplyConfiguration](
			"providers",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.Provider { return &v1alpha1.Provider{} },
			func() *v1alpha1.ProviderList { return &v1alpha1.ProviderList{} }),
	}
}
